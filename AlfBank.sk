on tab complete of "/pay":
	set tab completions for position 1 to all players


command /pay [<text>] [<number>]:
	trigger:
		if arg-1 is set:
			if arg-2 > 0:
				if {money::%player's uuid%} >= arg-2:
					if arg-1 parsed as a player has played before:
						remove arg-2 from {money::%player's uuid%}
						add arg-2 to {money::%arg-1 parsed as a player's uuid%}
						send "&7You have paid <##FBE108>%arg-1% %arg-2% tokens&7!" to player
						send "<##FBE108>%player% &7has paid you <##FBE108>%arg-2% tokens&7!" to arg-1 parsed as a player
					else if arg-1 parsed as a player is online:
						remove arg-2 from {money::%player's uuid%}
						add arg-2 to {money::%arg-1 parsed as a player's uuid%}
						send "&7You have paid <##FBE108>%arg-1% %arg-2% tokens&7!" to player
						send "<##FBE108>%player% &7has paid you <##FBE108>%arg-2% tokens&7!" to arg-1 parsed as a player
					else:
						send "&cInvalid Player"
				else:
					send "&cError. You do not have enough tokens."
			else:
				send "&cIncorrect Command. /pay (player) (amount)"
		else:
			send "&cIncorrect Command. /pay (player) (amount)"



command /balance [<text>]:
	aliases: bal
	trigger:
		if arg-1 is set:
			if arg-1 parsed as a player has played before:
				send "&7%arg-1% &fhas <#FBEF08>%{money::%arg-1 parsed as a player's uuid%}% &ftokens." to player
			else if arg-1 parsed as a offline player has played before:
				send "<#FBEF08>%arg-1% &fhas <#FBEF08>%{money::%arg-1 parsed as a offline player's uuid%}% &ftokens." to player
			else:
				send "&cInvalid Player." to player
		else:
			send "&fYou have <#FBEF08>%{money::%player's uuid%}% &ftokens." to player


on tab complete of "/balance" or "/bal":
	set tab completions for position 1 to all players

command /balancetop [<integer>]:
	aliases: /baltop, /bt
	trigger:
		set {_playersPerPage} to 10
		set {_sortedBalances::*} to sorted {money::*} from highest to lowest with format "@index"
		set {_totalPlayers} to size of {_sortedBalances::*}
		set {_totalPages} to ceil({_totalPlayers} / {_playersPerPage})
		if arg-1 is not set:
			set {_page} to 1
		else if arg-1 is a number:
			set {_page} to arg-1
		else:
			send "&cInvalid page number." to sender
			stop
		if {_page} > {_totalPages}:
			send "&cPage %{_page}% does not exist. There are only %{_totalPages}% pages." to sender
			stop
		if {_page} < 1:
			send "&cPage number must be at least 1." to sender
			stop
		set {_startIndex} to ({_page} - 1) * {_playersPerPage} + 1
		set {_endIndex} to {_startIndex} + {_playersPerPage} - 1
		if {_endIndex} > {_totalPlayers}:
			set {_endIndex} to {_totalPlayers}
		send "&6&m-------------------&6[ &eBaltop Page %{_page}%/%{_totalPages}% &6]&6&m-------------------" to sender
		set {_index} to {_startIndex}
		while {_index} <= {_endIndex}:
			set {_uuid} to {_sortedBalances::%{_index}%}
			set {_player} to "%{_uuid} parsed as offline player%"
			set {_balance} to {money::%{_uuid}%}
			send "&f#%{_index}% &b%{_player}%&8 » &e%format({_balance})%" to sender
			add 1 to {_index}
		if {_page} < {_totalPages}:
			send "&7Type &e/baltop %{_page} + 1% &7to view the next page." to sender
		send "&6&m-----------------------------------------------------" to sender


command /admineconomy [<text>] [<text>] [<number>]:
	permission: eco.admin
	trigger:
		if arg-1 is "set":
			if arg-2 is set:
				if arg-3 is set:
					if (arg-2 parsed as a offline player) has played before:
						set {money::%(arg-2 parsed as a offline player)'s uuid%} to arg-3
						send "&aYou have set %arg-2%'s balance to %arg-3%!"
					else if (arg-2 parsed as a offline player) is online:
						set {money::%(arg-2 parsed as a offline player)'s uuid%} to arg-3
						send "&aYou have set %arg-2%'s balance to %arg-3%!"
					else:
						send "&cThis player doesn't exist!" to player
		if arg-1 is "add":
			if arg-2 is set:
				if arg-3 is set:
					if (arg-2 parsed as a offline player) has played before:
						add arg-3 to {money::%(arg-2 parsed as a offline player)'s uuid%}
						send "&aYou have added %arg-3% to %arg-2%'s balance!"
					else if (arg-2 parsed as a offline player) is online:
						add arg-3 to {money::%(arg-2 parsed as a offline player)'s uuid%}
						send "&aYou have added %arg-3% to %arg-2%'s balance!"
					else:
						send "&cThis player doesn't exist!" to player
		if arg-1 is "remove":
			if arg-2 is set:
				if arg-3 is set:
					if (arg-2 parsed as a offline player) has played before:
						remove arg-3 from {money::%(arg-2 parsed as a offline player)'s uuid%}
						send "&aYou have removed %arg-3% from %arg-2%'s balance!"
					else if (arg-2 parsed as a offline player) is online:
						remove arg-3 from {money::%(arg-2 parsed as a offline player)'s uuid%}
						send "&aYou have removed %arg-3% from %arg-2%'s balance!"
					else:
						send "&cThis player doesn't exist!" to player
	


on tab complete for "/bank":
	set tab completions for position 1 to "withdraw" and "deposit"
	set tab completions for position 2 to "all", "0", "1", "2", "4", "5", "6", "7", "8" and "9"




command /bank [<text>] [<text>]:
	trigger:
		if arg-1 is "deposit":
			set {_a} to arg-2 parsed as a number
			if {_a} > 0:
				set {_a} to arg-2 parsed as a number
				if player has {_a} of {token}:
					remove {_a} of {token} from player's inventory
					add {_a} to {money::%player's uuid%}
					send "&7You have deposit <#FBE508>%{_a}% &7tokens." to player
					play sound "entity.experience_orb.pickup" with volume 1 to player
				else:
					send "&cYou do not have {_a} tokens in your inventory." to player
					play sound "entity.villager.no" with volume 1 to player
			else if arg-2 is "all":
				set {_a} to number of {token} in player's inventory
				remove {_a} of {token} from player's inventory
				add {_a} to {money::%player's uuid%}
				send "&7You have deposit <#FBE508>%{_a}% &7tokens." to player
				play sound "entity.experience_orb.pickup" with volume 1 to player
                
			else:
				send "&cInvalid Argument. /bank deposit (number)" to player
				play sound "entity.villager.no" with volume 1 to player
		else if arg-1 is "withdraw":
			set {_a} to arg-2 parsed as a number
			if {_a} > 0:
				if {money::%player's uuid%} >= {_a}:
					if player has enough space for {_a} of {token}:
						remove {_a} from {money::%player's uuid%}
						give player {_a} of {token}
						send "&7You have withdrew <#FBE508>%{_a}% &7tokens." to player
						play sound "entity.experience_orb.pickup" with volume 1 to player
					else:
						send "&cYou do not have enough inventory space for {_a} tokens." to player
						play sound "entity.villager.no" with volume 1 to player
				else:
					send "&cYou do not have %{_a}% tokens in your bank account." to player
					play sound "entity.villager.no" with volume 1 to player
			else if arg-2 is "all":
				set {_a} to {money::%player's uuid%}
				if player has enough space for {_a} of {token}:
					remove {_a} from {money::%player's uuid%}
					give player {_a} of {token}
					send "&7You have withdrew <#FBE508>%{_a}% &7tokens." to player
					play sound "entity.experience_orb.pickup" with volume 1 to player
				else:
					send "&cYou do not have enough inventory space for {_a} tokens." to player
					play sound "entity.villager.no" with volume 1 to player           
			else:
				send "&cInvalid Argument. /bank withdraw (number)" to player
				play sound "entity.villager.no" with volume 1 to player		
		else:
			open chest inventory with 6 rows named "&7ʙᴀɴᴋ" to player
			set slot (integers between 0 and 60) of player's current inventory to gray stained glass pane named " "
			set slot 10 of player's current inventory to gold nugget named "<#FBE508>ᴅᴇᴘᴏsɪᴛ 1 ᴄᴏɪɴ"
			set slot 19 of player's current inventory to gold nugget named "<#FBE508>ᴅᴇᴘᴏsɪᴛ 5 ᴄᴏɪɴs"
			set slot 28 of player's current inventory to gold nugget named "<#FBE508>ᴅᴇᴘᴏsɪᴛ 10 ᴄᴏɪɴs"
			set slot 37 of player's current inventory to gold nugget named "<#FBE508>ᴅᴇᴘᴏsɪᴛ 32 ᴄᴏɪɴs"
			set slot 16 of player's current inventory to gold nugget named "<#FBE508>ᴡɪᴛʜᴅʀᴀᴡ 1 ᴄᴏɪɴ"
			set slot 25 of player's current inventory to gold nugget named "<#FBE508>ᴡɪᴛʜᴅʀᴀᴡ 5 ᴄᴏɪɴs"
			set slot 34 of player's current inventory to gold nugget named "<#FBE508>ᴡɪᴛʜᴅʀᴀᴡ 10 ᴄᴏɪɴs"
			set slot 43 of player's current inventory to gold nugget named "<#FBE508>ᴡɪᴛʜᴅʀᴀᴡ 32 ᴄᴏɪɴs"
			set slot 21 of player's current inventory to gold nugget named "<#FBE508>ᴅᴇᴘᴏsɪᴛ ᴀʟʟ ʏᴏᴜʀ ᴄᴏɪɴs"
			set slot 23 of player's current inventory to gold nugget named "<#FBE508>ᴡɪᴛʜᴅʀᴀᴡ ᴀʟʟ ʏᴏᴜʀ ᴄᴏɪɴs"
	
on inventory click:
	if event-inventory's name = "&7ʙᴀɴᴋ":
		cancel event
		set {_c} to index of clicked slot
		if {_c} = 10:
			execute player command "bank deposit 1"
		if {_c} = 19:
			execute player command "bank deposit 5"
		if {_c} = 28:
			execute player command "bank deposit 10"
		if {_c} = 37:
			execute player command "bank deposit 32"			
		if {_c} = 21:
			set {_a} to number of {token} in player's inventory
			execute player command "bank deposit all"
		if {_c} = 16:
			execute player command "bank withdraw 1"
		if {_c} = 25:
			execute player command "bank withdraw 5"
		if {_c} = 34:
			execute player command "bank withdraw 10"
		if {_c} = 43:
			execute player command "bank withdraw 32"			
		if {_c} = 23:
			execute player command "bank withdraw all"			
				