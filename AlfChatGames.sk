# Chat Games
# Made by Alf

options:
	CGPrefix: &e&lChat Games &f|

command /chatgame <text> [<string>]:
	permission: chatgames.admin
	trigger:
		if arg-1 is "guessnumber":
			if arg-2 is set:
				if arg-2 is alphanumeric:
					set {_num} to arg-2 parsed as number
					if {_num} <= 10000:
						if {_num} >= 1:
							if {CG} is not true:
								CGGuessNumber({_num})
								send "&aChat game started! The number is &b%{_num}%&a." to player
							else:
								send "&cA chat game is already running." to player
						else:
							send "&cNumber must be above 1." to player
					else:
						send "&cNumber must be smaller than 10000." to player
				else:
					send "&cMust be a number." to player
			else:
				if {CG} is not true:
					set {_num} to random integer from 1 to 10000
					CGGuessNumber({_num})
					send "&aChat game started! The number is &b%{_num}%&a." to player
				else:
					send "&cA chat game is already running." to player
		else if arg-1 is "unscrambleword":
			if arg-2 is set:
				if arg-2 is alphanumeric:
					if {CG} is not true:
						CGUnscrambleWord(arg-2)
						send "&aChat game started! The word is &b%arg-2%&a." to player
					else:
						send "&cA chat game is already running." to player
				else:
					send "&cPlease send a valid word." to player
			else:
				if {CG} is not true:
					if {CGScrambledWords::*} is not empty:
						set {_word} to random element out of {CGScrambledWords::*}
						CGUnscrambleWord({_word})
						send "&aChat game started! The word is &b%{_word}%&a." to player
					else:
						send "&cYou must first add words using &e/addword <word>" to player
				else:
					send "&cA chat game is already running." to player
		else if arg-1 is "editrewards":
			open chest inventory with 5 rows named "&eChat Game Rewards &f| &4Admin" to player
			set slots (integers between 0 and 8) of player's current inventory to light blue stained glass pane named " "
			set slots (integers between 36 and 44) of player's current inventory to light blue stained glass pane named " "
			set slot 4 of player's current inventory to lime dye named "&aSave Rewards" with lore "", "&f| &eClick to save chat game rewards"
			set slot 40 of player's current inventory to red dye named "&cBack" with lore "", "&f| &eClick to exit GUI", "", "&cMake sure you save first!"
			set {_slot} to 9
			loop {ChatGameRewards::*}:
				set slot {_slot} of player's current inventory to loop-value
				if {_slot} < 45:
					add 1 to {_slot}			
		else:
			send "&cUsage: /chatgame editrewards/guessnumber/unscrambleword" to player
			
command /addword <text>:
	permission: chatgames.admin
	trigger:
		if arg-1 is alphanumeric:
			add arg-1 to {CGScrambledWords::*}
			send "&aSuccessfully added &f%arg-1% &ato chat game word list!" to player
		else:
			send "&cPlease only use alphanumeric words." to player
			
command /removeword <text>:
	permission: chatgames.admin
	trigger:
		if {CGScrambledWords::*} contains arg-1:
			subtract arg-1 from {CGScrambledWords::*}
			send "&aSuccessfully removed &f%arg-1% &afrom chat game word list!" to player
		else:
			send "&cThis word is not currently added." to player
command /listwords:
	permission: chatgames.admin
	trigger:
		if {CGScrambledWords::*} is not empty:
			send "&e&nChat Game Word List" to player
			loop {CGScrambledWords::*}:
				send "&e- &f%loop-value%" to player
		else:
			send "&cThere are currently no words." to player
						
function CGGuessNumber(n: number):
	set {CG} to true
	set {CGGuessNumber} to true
	set {CGNumber} to {_n}
	set {CGStart} to now
	broadcast ""
	broadcast "              &e&lChat Game              " 
	broadcast ""
	broadcast "      &bChallenge: &aGuess the number!    "
	broadcast "   &7&oHint: Number is between &f0 &7and &f10000   "
	loop all players:
		set {CGLastGuess::%loop-player's uuid%} to (now - 2 seconds)
		set {CGGuesses::%loop-player's uuid%} to 0
	wait 1 minute
	if {CGGuessNumber} is true:
		set {CGGuessNumber} to false
		set {CG} to false
		broadcast "{@CGPrefix} &cYou ran out of time!"
		broadcast "{@CGPrefix} &fThe number was &b%{CGNumber}%&f."

function CGUnscrambleWord(w: text):
	set {CG} to true
	set {CGUnscrambleWord} to true
	add (character at position (integers between 1 and (length of {_w})) of {_w}) to {_list::*}
	set {_} to "%shuffled {_list::*}%"
	replace all "and"," ","," with "" in {_}
	set {CGWord} to {_w}
	set {CGStart} to now
	broadcast ""
	broadcast "              &e&lChat Game              " 
	broadcast ""
	broadcast "      &bChallenge: &aUnscramble the word!  "
	broadcast "          &9Scrambled Word: &f&l%{_}%           "
	wait 30 seconds
	if {CGUnscrambleWord} is true:
		set {CGUnscrambleWord} to false
		set {CG} to false
		broadcast "{@CGPrefix} &cYou ran out of time!"
		broadcast "{@CGPrefix} &fThe word was &b%{CGWord}%&f."


on chat:
	if {CGGuessNumber} is true:
		cancel event
		if difference between {CGLastGuess::%player's uuid%} and now > 2 seconds:
			if message is not alphanumeric:
				send "&cYour answer must only contain numbers." to player
			else if message matches "(?i).*[a-z].*":
				send "&cYour answer must only contain numbers." to player
			else if message parsed as number = {CGNumber}:
				add 1 to {CGGuesses::%player's uuid%}
				set {CGGuessNumber} to false
				set {_CGReward} to random element out of {ChatGameRewards::*}
				set {CG} to false
				set {_time} to difference between {CGStart} and now
				broadcast "              &e&lChat Game              " 
				broadcast ""
				broadcast "         &aWinner: &f%player%    "
				broadcast "         &bTime: &f%{_time}%       " 
				broadcast "         &dGuesses: &f%{CGGuesses::%player's uuid%}%"
				broadcast "         &7Answer: &f%{CGNumber}%"
				if display name of {_CGReward} is set:
					broadcast "         &6* &6&lReward &6*:&r %display name of {_CGReward}%   "
				else:
					broadcast "         &6* &6&lReward &6*:&r %{_CGReward}%         " in proper case
				give player {_CGReward}
			else if message parsed as number < {CGNumber}:
				add 1 to {CGGuesses::%player's uuid%}
				set {CGLastGuess::%player's uuid%} to now
				send "&cHigher" to player
				broadcast "{@CGPrefix} &f%player% guessed too low!"
			else if message parsed as number > {CGNumber}:
				add 1 to {CGGuesses::%player's uuid%}
				set {CGLastGuess::%player's uuid%} to now
				send "&cLower" to player
				broadcast "{@CGPrefix} &f%player% guessed too high!"		
		else:
			send "&cYou must wait 2 seconds between each guess." to player
	else if {CGUnscrambleWord} is true:
		cancel event
		if message = {CGWord}:
			set {CGUnscrambleWord} to false
			set {_CGReward} to random element out of {ChatGameRewards::*}
			set {CG} to false
			set {_time} to difference between {CGStart} and now
			broadcast "              &e&lChat Game              " 
			broadcast ""
			broadcast "         &aWinner: &f%player%    "
			broadcast "         &bTime: &f%{_time}%       " 
			broadcast "         &7Word: &f%{CGWord}%"
			if display name of {_CGReward} is set:
				broadcast "         &6* &6&lReward &6*:&r %display name of {_CGReward}%   "
			else:
				broadcast "         &6* &6&lReward &6*:&r %{_CGReward}%     " in proper case
			give player {_CGReward}
		else:
			send "&cWrong answer!" to player
				
on tab complete of "/chatgame":
	set tab completions for position 1 to "guessnumber", "unscrambleword", "editrewards"
	if tab arg-1 = "guessnumber":
		set tab completions for position 2 to "1", "2", "3", "4", "5", "6", "7", "8", "9"
	if tab arg-1 = "unscrambleword":
		set tab completions for position 2 to "<word>"
		
on inventory click:
	if name of event-inventory = "&eChat Game Rewards &f| &4Admin":
		if event-item is light blue stained glass pane named " ":
			cancel event
		else if event-item is red dye named "&cBack":
			cancel event
			play sound "ui.button.click" to player
			close player's inventory
		else if event-item is lime dye named "&aSave Rewards":
			cancel event
			play sound "ui.button.click" to player
			clear {ChatGameRewards::*}
			loop 25 times:
				set {_slot} to (loop-number + 9)
				if slot {_slot} of player's current inventory isn't air:
					if slot {_slot} of player's current inventory isn't light blue stained glass pane named " ":
						add slot {_slot} of player's current inventory to {ChatGameRewards::*}
			play sound "entity.player.levelup" to player
			send "&aChat Game rewards successfully saved." to player
		
